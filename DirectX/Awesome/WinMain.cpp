#include <Windows.h>
#include <iostream>
#include <string>
#include "WindowsMessageMap.h"

//#include "WindowsMessageMap.h"


LRESULT CALLBACK WndProc(HWND hWnd, UINT msg, WPARAM wParm, LPARAM lParm)
{
	static WindowsMessageMap mm;
	// Print incoming msg to the debug console.
	OutputDebugStringA(mm(msg, lParm, wParm).c_str());
	switch (msg)
	{
	case WM_CLOSE:
		PostQuitMessage(69);
		break;
	default:
		break;
	}
	return DefWindowProc(hWnd, msg, wParm, lParm);
}


int CALLBACK WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow)
{
	const auto pClassName = L"awesome3d";

	// Yang icon AND bitmask 

	BYTE ANDmaskIcon[] = { 0xFF, 0xFF, 0xFF, 0xFF,   // line 1 
						  0xFF, 0xFF, 0xC3, 0xFF,   // line 2 
						  0xFF, 0xFF, 0x00, 0xFF,   // line 3 
						  0xFF, 0xFE, 0x00, 0x7F,   // line 4 

						  0xFF, 0xFC, 0x00, 0x1F,   // line 5 
						  0xFF, 0xF8, 0x00, 0x0F,   // line 6 
						  0xFF, 0xF8, 0x00, 0x0F,   // line 7 
						  0xFF, 0xF0, 0x00, 0x07,   // line 8 

						  0xFF, 0xF0, 0x00, 0x03,   // line 9 
						  0xFF, 0xE0, 0x00, 0x03,   // line 10 
						  0xFF, 0xE0, 0x00, 0x01,   // line 11 
						  0xFF, 0xE0, 0x00, 0x01,   // line 12 

						  0xFF, 0xF0, 0x00, 0x01,   // line 13 
						  0xFF, 0xF0, 0x00, 0x00,   // line 14 
						  0xFF, 0xF8, 0x00, 0x00,   // line 15 
						  0xFF, 0xFC, 0x00, 0x00,   // line 16 

						  0xFF, 0xFF, 0x00, 0x00,   // line 17 
						  0xFF, 0xFF, 0x80, 0x00,   // line 18 
						  0xFF, 0xFF, 0xE0, 0x00,   // line 19 
						  0xFF, 0xFF, 0xE0, 0x01,   // line 20 

						  0xFF, 0xFF, 0xF0, 0x01,   // line 21 
						  0xFF, 0xFF, 0xF0, 0x01,   // line 22 
						  0xFF, 0xFF, 0xF0, 0x03,   // line 23 
						  0xFF, 0xFF, 0xE0, 0x03,   // line 24 

						  0xFF, 0xFF, 0xE0, 0x07,   // line 25 
						  0xFF, 0xFF, 0xC0, 0x0F,   // line 26 
						  0xFF, 0xFF, 0xC0, 0x0F,   // line 27 
						  0xFF, 0xFF, 0x80, 0x1F,   // line 28 

						  0xFF, 0xFF, 0x00, 0x7F,   // line 29 
						  0xFF, 0xFC, 0x00, 0xFF,   // line 30 
						  0xFF, 0xF8, 0x03, 0xFF,   // line 31 
						  0xFF, 0xFC, 0x3F, 0xFF };  // line 32 

	// Yang icon XOR bitmask 

	BYTE XORmaskIcon[] = { 0x00, 0x00, 0x00, 0x00,   // line 1 
						  0x00, 0x00, 0x00, 0x00,   // line 2 
						  0x00, 0x00, 0x00, 0x00,   // line 3 
						  0x00, 0x00, 0x00, 0x00,   // line 4 

						  0x00, 0x00, 0x00, 0x00,   // line 5 
						  0x00, 0x00, 0x00, 0x00,   // line 6 
						  0x00, 0x00, 0x00, 0x00,   // line 7 
						  0x00, 0x00, 0x38, 0x00,   // line 8 

						  0x00, 0x00, 0x7C, 0x00,   // line 9 
						  0x00, 0x00, 0x7C, 0x00,   // line 10 
						  0x00, 0x00, 0x7C, 0x00,   // line 11 
						  0x00, 0x00, 0x38, 0x00,   // line 12 

						  0x00, 0x00, 0x00, 0x00,   // line 13 
						  0x00, 0x00, 0x00, 0x00,   // line 14 
						  0x00, 0x00, 0x00, 0x00,   // line 15 
						  0x00, 0x00, 0x00, 0x00,   // line 16 

						  0x00, 0x00, 0x00, 0x00,   // line 17 
						  0x00, 0x00, 0x00, 0x00,   // line 18 
						  0x00, 0x00, 0x00, 0x00,   // line 19 
						  0x00, 0x00, 0x00, 0x00,   // line 20 

						  0x00, 0x00, 0x00, 0x00,   // line 21 
						  0x00, 0x00, 0x00, 0x00,   // line 22 
						  0x00, 0x00, 0x00, 0x00,   // line 23 
						  0x00, 0x00, 0x00, 0x00,   // line 24 

						  0x00, 0x00, 0x00, 0x00,   // line 25 
						  0x00, 0x00, 0x00, 0x00,   // line 26 
						  0x00, 0x00, 0x00, 0x00,   // line 27 
						  0x00, 0x00, 0x00, 0x00,   // line 28 

						  0x00, 0x00, 0x00, 0x00,   // line 29 
						  0x00, 0x00, 0x00, 0x00,   // line 30 
						  0x00, 0x00, 0x00, 0x00,   // line 31 
						  0x00, 0x00, 0x00, 0x00 };  // line 32 

	HICON hIcon = CreateIcon(hInstance, // application instance  
		32, // icon width 
		32, // icon height 
		1, // number of XOR planes 
		1, // number of bits per pixel 
		ANDmaskIcon, // AND bitmask  
		XORmaskIcon);    // XOR bitmask 

	// Register window class
	WNDCLASSEXW wc = { 0 };
	wc.cbSize = sizeof(wc);
	wc.style = CS_OWNDC;
	wc.lpfnWndProc = WndProc;
	wc.cbClsExtra = 0;
	wc.cbWndExtra = 0;
	wc.hInstance = hInstance;
	wc.hIcon = hIcon;
	wc.hCursor = nullptr;
	wc.hbrBackground = nullptr;
	wc.lpszMenuName = nullptr;
	wc.hIconSm = nullptr;
	wc.lpszClassName = pClassName;
	RegisterClassExW(&wc);

	// Create window instance
	const HWND hWnd = CreateWindowExW(WS_EX_CONTEXTHELP, pClassName, L"Awesome Window",
		WS_CAPTION | WS_MINIMIZEBOX | WS_MAXIMIZEBOX | WS_VSCROLL | WS_HSCROLL | WS_SYSMENU, 200, 200, 640, 480,
		nullptr, nullptr, hInstance, nullptr);
	ShowWindow(hWnd, nCmdShow);
	MSG msg;
	BOOL gResult;
	while ((gResult = GetMessageW(&msg, hWnd, 0, 0)) > 0)
	{
		TranslateMessage(&msg);
		DispatchMessageW(&msg);
	}
	if (gResult == -1)
		return -1;
	return msg.wParam;
}